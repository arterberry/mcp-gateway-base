# k8s/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: mcp-services
  labels:
    name: mcp-services
---
# k8s/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-gateway
  namespace: mcp-services
---
# k8s/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: mcp-services
  name: mcp-gateway-role
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mcp-gateway-binding
  namespace: mcp-services
subjects:
- kind: ServiceAccount
  name: mcp-gateway
  namespace: mcp-services
roleRef:
  kind: Role
  name: mcp-gateway-role
  apiGroup: rbac.authorization.k8s.io
---
# k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-gateway
  namespace: mcp-services
  labels:
    app: mcp-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mcp-gateway
  template:
    metadata:
      labels:
        app: mcp-gateway
    spec:
      serviceAccountName: mcp-gateway
      containers:
      - name: mcp-gateway
        image: mcp-gateway:dev
        imagePullPolicy: Never  # Use local image from minikube
        ports:
        - name: mcp
          containerPort: 8081
          protocol: TCP
        - name: health
          containerPort: 8086
          protocol: TCP
        env:
        - name: MCP_GATEWAY_CONFIG
          value: "config.yaml"
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8086
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8086
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
# k8s/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mcp-gateway
  namespace: mcp-services
  labels:
    app: mcp-gateway
spec:
  selector:
    app: mcp-gateway
  ports:
  - name: mcp
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: health
    port: 8086
    targetPort: 8086
    protocol: TCP
  type: ClusterIP
---
# k8s/test-mcp-server.yaml - Example MCP server for testing discovery
apiVersion: v1
kind: Service
metadata:
  name: mcp-mux-testserver
  namespace: mcp-services
  labels:
    mcp-server: "enabled"  # Discovery label selector
    app.kubernetes.io/name: "mcp-mux"
  annotations:
    mcp.gateway/id: "mcp-mux"
    mcp.gateway/prefix: "mcp-mux"
    mcp.gateway/address: "http://mcp-mux-testserver.mcp-services.svc.cluster.local:8081/mcp"
spec:
  selector:
    app: mcp-mux
  # This won't match any real pods (for testing)
  ports:
  - name: http
    port: 8081
    targetPort: 8081
  type: ClusterIP